// Copyright 2015 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by genmathops.py - do not edit

use typeinference::scalar;
use super::jvmops::*;

pub struct UnaryOpInfo {
    pub op: u8,
    pub src: scalar::T,
    pub dest: scalar::T,
}

pub struct BinaryOpInfo {
    pub op: u8,
    pub src: scalar::T,
    pub src2: scalar::T,
}

pub struct Binary2OpInfo {
    pub op: u8,
}

const UNARY_BASE: u8 = 0x7b;
static UNARY: [UnaryOpInfo; 21] = [
    UnaryOpInfo{op: INEG, src: scalar::INT, dest: scalar::INT},
    UnaryOpInfo{op: IXOR, src: scalar::INT, dest: scalar::INT},
    UnaryOpInfo{op: LNEG, src: scalar::LONG, dest: scalar::LONG},
    UnaryOpInfo{op: LXOR, src: scalar::LONG, dest: scalar::LONG},
    UnaryOpInfo{op: FNEG, src: scalar::FLOAT, dest: scalar::FLOAT},
    UnaryOpInfo{op: DNEG, src: scalar::DOUBLE, dest: scalar::DOUBLE},
    UnaryOpInfo{op: I2L, src: scalar::INT, dest: scalar::LONG},
    UnaryOpInfo{op: I2F, src: scalar::INT, dest: scalar::FLOAT},
    UnaryOpInfo{op: I2D, src: scalar::INT, dest: scalar::DOUBLE},
    UnaryOpInfo{op: L2I, src: scalar::LONG, dest: scalar::INT},
    UnaryOpInfo{op: L2F, src: scalar::LONG, dest: scalar::FLOAT},
    UnaryOpInfo{op: L2D, src: scalar::LONG, dest: scalar::DOUBLE},
    UnaryOpInfo{op: F2I, src: scalar::FLOAT, dest: scalar::INT},
    UnaryOpInfo{op: F2L, src: scalar::FLOAT, dest: scalar::LONG},
    UnaryOpInfo{op: F2D, src: scalar::FLOAT, dest: scalar::DOUBLE},
    UnaryOpInfo{op: D2I, src: scalar::DOUBLE, dest: scalar::INT},
    UnaryOpInfo{op: D2L, src: scalar::DOUBLE, dest: scalar::LONG},
    UnaryOpInfo{op: D2F, src: scalar::DOUBLE, dest: scalar::FLOAT},
    UnaryOpInfo{op: I2B, src: scalar::INT, dest: scalar::INT},
    UnaryOpInfo{op: I2C, src: scalar::INT, dest: scalar::INT},
    UnaryOpInfo{op: I2S, src: scalar::INT, dest: scalar::INT},
];
const BINARY_BASE: u8 = 0x90;
static BINARY: [BinaryOpInfo; 64] = [
    BinaryOpInfo{op: IADD, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: ISUB, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IMUL, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IDIV, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IREM, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IAND, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IOR, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IXOR, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: ISHL, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: ISHR, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IUSHR, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: LADD, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LSUB, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LMUL, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LDIV, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LREM, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LAND, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LOR, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LXOR, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LSHL, src: scalar::LONG, src2: scalar::INT},
    BinaryOpInfo{op: LSHR, src: scalar::LONG, src2: scalar::INT},
    BinaryOpInfo{op: LUSHR, src: scalar::LONG, src2: scalar::INT},
    BinaryOpInfo{op: FADD, src: scalar::FLOAT, src2: scalar::FLOAT},
    BinaryOpInfo{op: FSUB, src: scalar::FLOAT, src2: scalar::FLOAT},
    BinaryOpInfo{op: FMUL, src: scalar::FLOAT, src2: scalar::FLOAT},
    BinaryOpInfo{op: FDIV, src: scalar::FLOAT, src2: scalar::FLOAT},
    BinaryOpInfo{op: FREM, src: scalar::FLOAT, src2: scalar::FLOAT},
    BinaryOpInfo{op: DADD, src: scalar::DOUBLE, src2: scalar::DOUBLE},
    BinaryOpInfo{op: DSUB, src: scalar::DOUBLE, src2: scalar::DOUBLE},
    BinaryOpInfo{op: DMUL, src: scalar::DOUBLE, src2: scalar::DOUBLE},
    BinaryOpInfo{op: DDIV, src: scalar::DOUBLE, src2: scalar::DOUBLE},
    BinaryOpInfo{op: DREM, src: scalar::DOUBLE, src2: scalar::DOUBLE},
    BinaryOpInfo{op: IADD, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: ISUB, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IMUL, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IDIV, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IREM, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IAND, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IOR, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IXOR, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: ISHL, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: ISHR, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: IUSHR, src: scalar::INT, src2: scalar::INT},
    BinaryOpInfo{op: LADD, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LSUB, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LMUL, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LDIV, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LREM, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LAND, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LOR, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LXOR, src: scalar::LONG, src2: scalar::LONG},
    BinaryOpInfo{op: LSHL, src: scalar::LONG, src2: scalar::INT},
    BinaryOpInfo{op: LSHR, src: scalar::LONG, src2: scalar::INT},
    BinaryOpInfo{op: LUSHR, src: scalar::LONG, src2: scalar::INT},
    BinaryOpInfo{op: FADD, src: scalar::FLOAT, src2: scalar::FLOAT},
    BinaryOpInfo{op: FSUB, src: scalar::FLOAT, src2: scalar::FLOAT},
    BinaryOpInfo{op: FMUL, src: scalar::FLOAT, src2: scalar::FLOAT},
    BinaryOpInfo{op: FDIV, src: scalar::FLOAT, src2: scalar::FLOAT},
    BinaryOpInfo{op: FREM, src: scalar::FLOAT, src2: scalar::FLOAT},
    BinaryOpInfo{op: DADD, src: scalar::DOUBLE, src2: scalar::DOUBLE},
    BinaryOpInfo{op: DSUB, src: scalar::DOUBLE, src2: scalar::DOUBLE},
    BinaryOpInfo{op: DMUL, src: scalar::DOUBLE, src2: scalar::DOUBLE},
    BinaryOpInfo{op: DDIV, src: scalar::DOUBLE, src2: scalar::DOUBLE},
    BinaryOpInfo{op: DREM, src: scalar::DOUBLE, src2: scalar::DOUBLE},
];
const BINARY_LIT_BASE: u8 = 0xd0;
static BINARY_LIT: [Binary2OpInfo; 19] = [
    Binary2OpInfo{op: IADD},
    Binary2OpInfo{op: ISUB},
    Binary2OpInfo{op: IMUL},
    Binary2OpInfo{op: IDIV},
    Binary2OpInfo{op: IREM},
    Binary2OpInfo{op: IAND},
    Binary2OpInfo{op: IOR},
    Binary2OpInfo{op: IXOR},
    Binary2OpInfo{op: IADD},
    Binary2OpInfo{op: ISUB},
    Binary2OpInfo{op: IMUL},
    Binary2OpInfo{op: IDIV},
    Binary2OpInfo{op: IREM},
    Binary2OpInfo{op: IAND},
    Binary2OpInfo{op: IOR},
    Binary2OpInfo{op: IXOR},
    Binary2OpInfo{op: ISHL},
    Binary2OpInfo{op: ISHR},
    Binary2OpInfo{op: IUSHR},
];

pub fn unary(op: u8) -> &'static UnaryOpInfo { &UNARY[(op - UNARY_BASE) as usize] }
pub fn binary(op: u8) -> &'static BinaryOpInfo { &BINARY[(op - BINARY_BASE) as usize] }
pub fn binary_lit(op: u8) -> &'static Binary2OpInfo { &BINARY_LIT[(op - BINARY_LIT_BASE) as usize] }
